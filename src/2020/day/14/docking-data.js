const input = 'mask = 11100010111110X010100001X00000011XXX\n' +
    '6540 1053547115\n' +
    '7184 10509\n' +
    '13014 7128\n' +
    'mask = 110110X110100X10001X110110001000100X\n' +
    '23173 12045\n' +
    '414 4313357\n' +
    '18580 213079949\n' +
    '22303 1714\n' +
    'mask = 1X01101X0110011XX1001X1XX001X00X1100\n' +
    '38327 97337978\n' +
    '24290 12593688\n' +
    '63524 3392\n' +
    '4214 243223\n' +
    '5420 935740301\n' +
    '18031 632714698\n' +
    'mask = X10110101X1X011001100X11010010X00111\n' +
    '61349 1336335\n' +
    '50853 1269\n' +
    '58635 59668009\n' +
    '41045 18639\n' +
    '11918 57288\n' +
    '45645 14996953\n' +
    '26134 100867777\n' +
    'mask = 11011010011XX110X10010X010011XX10000\n' +
    '10191 44785522\n' +
    '58901 12733\n' +
    '10035 11490\n' +
    '47614 20548428\n' +
    '31150 3738\n' +
    '4130 50709924\n' +
    'mask = 1X0X101X01100100X101X11XX00X00X10000\n' +
    '49047 151086476\n' +
    '19156 271697\n' +
    '2453 498179\n' +
    '35232 401613\n' +
    'mask = 110X0XX010XXX1001010011101011X00010X\n' +
    '46908 324\n' +
    '58098 7082\n' +
    '33784 87754344\n' +
    '55455 13375\n' +
    '7412 407\n' +
    '40954 287953968\n' +
    '8750 4872\n' +
    'mask = X1011010X1X00X1001001110000110111010\n' +
    '16588 240485130\n' +
    '26942 4653\n' +
    '49588 2929\n' +
    'mask = 010010X0X10X0X00X000X11010100011000X\n' +
    '20819 16307212\n' +
    '43449 110081329\n' +
    '53732 218919035\n' +
    '33252 1410886\n' +
    '9342 367201704\n' +
    'mask = 1X01X010011XX11011000X10011XX1X0X100\n' +
    '31007 4767916\n' +
    '28355 6523\n' +
    '43831 522189\n' +
    '50230 25123775\n' +
    '9436 2916444\n' +
    '34444 29463\n' +
    'mask = 010X101010XX011XX0110X001XX0X0001001\n' +
    '5352 766573\n' +
    '2337 1421026\n' +
    '16462 1440669\n' +
    '57643 243578224\n' +
    '37865 9557133\n' +
    'mask = 11001010XXX0X11100100X011X0100010000\n' +
    '10674 92911\n' +
    '52874 314\n' +
    '4175 7882105\n' +
    '4647 437962\n' +
    '54577 6350\n' +
    'mask = X1011110X1X1X1011000XXX1X1100X000001\n' +
    '8939 152882660\n' +
    '32991 1900820\n' +
    '26566 6277291\n' +
    '3398 338\n' +
    '198 1092255\n' +
    '42779 706535\n' +
    'mask = 110110X100100110110X00XX000110001100\n' +
    '41624 107699\n' +
    '136 10907\n' +
    '59881 1639653\n' +
    '10152 13541233\n' +
    '29192 569789\n' +
    'mask = 110011X10001XX0X00X11011111110111010\n' +
    '29497 61196354\n' +
    '33642 1690\n' +
    '3924 10240\n' +
    '30991 321393\n' +
    '6007 8252\n' +
    '10529 383134\n' +
    '22419 439560\n' +
    'mask = 11011011001X00X00110X00111011X001011\n' +
    '9085 1844781\n' +
    '21531 14606246\n' +
    '6151 346328157\n' +
    'mask = 1XX110X00011111011X100X000X00011X111\n' +
    '20254 4775875\n' +
    '18751 34439\n' +
    '51931 10866\n' +
    '13884 1396272\n' +
    '38876 110002\n' +
    '10554 3811164\n' +
    'mask = 110X10101X1101110010X01X1001X000000X\n' +
    '24882 5606803\n' +
    '60456 235252\n' +
    '29117 1172\n' +
    'mask = 11111010X10X011010100001X10010XXXX10\n' +
    '22085 3767\n' +
    '35246 637281\n' +
    '57643 1015666\n' +
    'mask = 010X1010X00X011110X1X1X100000110X0X1\n' +
    '2766 1017781\n' +
    '18472 65544229\n' +
    '60177 44130\n' +
    '49328 252860\n' +
    '63588 2718\n' +
    '25385 1040\n' +
    'mask = 1X1101X01X10XX0010101X101101X00X1101\n' +
    '1085 1816\n' +
    '19718 2409\n' +
    '61449 466156\n' +
    'mask = 11011000100X01X1000000X0010X01001001\n' +
    '27929 169017783\n' +
    '3960 138790\n' +
    '49378 3765\n' +
    '56654 395338\n' +
    '64888 11900103\n' +
    'mask = 11X01010XXX001X0101010X0010110101X11\n' +
    '44604 28291214\n' +
    '22847 316570\n' +
    'mask = X111X11X11X111001X1011X101000X100000\n' +
    '45942 2947119\n' +
    '14974 2025710\n' +
    '24828 2567\n' +
    '10597 765995\n' +
    '45790 461\n' +
    '4860 621896\n' +
    'mask = X10X1X110XX1000X001X11100111001100X1\n' +
    '34726 1325661\n' +
    '15011 13271770\n' +
    '49977 455\n' +
    '13385 359763\n' +
    '64427 442514062\n' +
    '37436 240727423\n' +
    'mask = X10X10X00X1001000X0X10X000011010X0X1\n' +
    '5887 567410\n' +
    '15160 51659\n' +
    'mask = 110X1X10100101110000X10X110X0X011XX1\n' +
    '48320 1175498\n' +
    '8272 829060\n' +
    '62848 373913\n' +
    '51709 1454\n' +
    '7351 28999323\n' +
    'mask = 110X1010X11X011XX010X101X0001001XX10\n' +
    '5420 194080\n' +
    '64003 114629\n' +
    '47520 30982831\n' +
    '9857 9284958\n' +
    '54577 1423\n' +
    '48414 5845567\n' +
    '40311 19305\n' +
    'mask = 11X110X10011000100X01110XX1100X11011\n' +
    '6785 55956876\n' +
    '27761 2895313\n' +
    '48178 815\n' +
    '42069 264595943\n' +
    '18031 42\n' +
    '40874 974080914\n' +
    'mask = 0X0110100X10010X0X01100X0111XX1XX010\n' +
    '27948 238815667\n' +
    '4959 142720651\n' +
    '62738 28494\n' +
    'mask = 1101X01001100X10X0X01X11001000XX00XX\n' +
    '54937 1139391\n' +
    '25222 2512343\n' +
    '9470 120874\n' +
    '26552 3096\n' +
    '24626 51146359\n' +
    '60877 1405\n' +
    'mask = 1X00101001X1011110XXX1010101101X0X10\n' +
    '29192 1147\n' +
    '5280 64971\n' +
    '59069 18787283\n' +
    '8736 252\n' +
    '27948 7736001\n' +
    'mask = 110110X00110X1X00101XX10010XX0111001\n' +
    '39600 150148438\n' +
    '19510 2028\n' +
    '10561 760736\n' +
    '33637 3786\n' +
    '27840 19776\n' +
    '43173 113509213\n' +
    'mask = 0101X010100X0111001100001X00010X1101\n' +
    '19019 109550\n' +
    '61970 9527643\n' +
    '54718 146897567\n' +
    '34440 23504976\n' +
    'mask = X101101010X10111001X0XX01X000XXX1001\n' +
    '27559 32347\n' +
    '31834 5553\n' +
    '25888 816\n' +
    '50958 143680145\n' +
    '40800 1579721\n' +
    '3365 7205751\n' +
    'mask = 11011X101110X1111X1011XX101X00000000\n' +
    '39744 1628496\n' +
    '26998 174246124\n' +
    '55100 78394066\n' +
    '41107 515946\n' +
    '11859 6199516\n' +
    '6466 49035\n' +
    '9382 132658816\n' +
    'mask = 1001X010011001X1010011X01X0X0XX11110\n' +
    '43573 261285686\n' +
    '62900 80070\n' +
    '39087 711323353\n' +
    '3697 2909066\n' +
    '30760 42870790\n' +
    '19499 380182\n' +
    'mask = 1101101XXX100110X100X011X00000X01000\n' +
    '48681 42494\n' +
    '58173 6444223\n' +
    '42666 167047779\n' +
    '55462 4061450\n' +
    '4524 2982705\n' +
    '25898 122811236\n' +
    'mask = X10010X00X00011X10111111100001001100\n' +
    '55341 907685\n' +
    '25896 5234228\n' +
    '46456 205011032\n' +
    'mask = 110X10X001X1111011000000011X0101110X\n' +
    '14875 1333\n' +
    '56659 15180\n' +
    '45783 104761\n' +
    '4214 26033\n' +
    'mask = 0X001X0001010100X000010010X100101000\n' +
    '2356 182\n' +
    '12067 524650703\n' +
    '14111 5231\n' +
    '46413 60005\n' +
    '14331 221755997\n' +
    '10416 589456\n' +
    'mask = 1101101010010X11001110101X110X01X0X0\n' +
    '3517 125300\n' +
    '48255 4322\n' +
    '25758 724\n' +
    '3620 780\n' +
    '35335 3264540\n' +
    'mask = 011X0X10111X1100101X0010X101XXX1X110\n' +
    '50922 1340\n' +
    '49956 7971\n' +
    '16765 117074\n' +
    '37341 101880\n' +
    '6382 270794\n' +
    '62129 3524\n' +
    'mask = X1110X10111X110010101X111100X0XX01X1\n' +
    '29143 51870362\n' +
    '44539 5471456\n' +
    '17812 555343768\n' +
    '25896 76993\n' +
    '61860 5583277\n' +
    '33249 1649382\n' +
    'mask = 10X110X00X111XX01X110X001001X0X00101\n' +
    '60418 40765\n' +
    '9791 276\n' +
    '20819 1939\n' +
    '16099 50776\n' +
    '44908 13705675\n' +
    '3842 12939\n' +
    'mask = 1100101X1X000110101000011101X0XX1001\n' +
    '64795 7473\n' +
    '20801 10933303\n' +
    '45749 15523455\n' +
    '4130 14179780\n' +
    '24197 22821\n' +
    '5171 1847\n' +
    '56522 80\n' +
    'mask = X0X1X011011001001101011X1XX00111X000\n' +
    '23931 391795\n' +
    '62129 46071660\n' +
    '10529 340467299\n' +
    '22948 590\n' +
    '18580 986058\n' +
    '23943 6228242\n' +
    'mask = 111X10101X1101X01010X1010X0100000101\n' +
    '22045 1236872\n' +
    '43412 11981\n' +
    '51116 228048\n' +
    '4214 34658\n' +
    '14961 28301063\n' +
    '19718 125855455\n' +
    'mask = 110110110XX101X0011001X10100001110X1\n' +
    '29192 375215772\n' +
    '43812 106881120\n' +
    '22916 11512817\n' +
    '35299 161518\n' +
    '39569 390\n' +
    'mask = 1X0110100110X100X101011X1101X0010X11\n' +
    '5014 15731815\n' +
    '42765 90079\n' +
    '44656 360472556\n' +
    '4214 2023626\n' +
    '5777 15044384\n' +
    '35463 1668\n' +
    'mask = 1X10X010X01X011010X0X00X00X100101011\n' +
    '29192 975691\n' +
    '3256 478673\n' +
    '3960 4314\n' +
    '56647 827\n' +
    '4162 228123\n' +
    'mask = X101001001100110XX101010011010001X00\n' +
    '3719 312891161\n' +
    '44656 19029928\n' +
    '45713 23393\n' +
    '45594 1879\n' +
    '20653 392\n' +
    '55312 115889500\n' +
    'mask = 01X01010XX0X0100000X0100X010XX0110X1\n' +
    '1085 466780\n' +
    '27568 13308\n' +
    '6034 362313775\n' +
    'mask = 10011X1001X0X100010110100001100X0101\n' +
    '49413 422627\n' +
    '29467 25028765\n' +
    '11378 11086\n' +
    'mask = 0X0110X0100101110011X1X0X10X01100010\n' +
    '62515 10720832\n' +
    '55462 1012292\n' +
    '21513 762797\n' +
    '2053 21634153\n' +
    '11742 168511869\n' +
    '38283 90760561\n' +
    '36076 23295980\n' +
    'mask = 11110010110111X010X0X00111111010X011\n' +
    '1828 3667\n' +
    '11358 522202\n' +
    '41729 28977762\n' +
    '37384 25384\n' +
    '33843 450\n' +
    '3188 71694\n' +
    '43265 107204037\n' +
    'mask = 1XX110100X111110X10XX000X00000X1111X\n' +
    '51454 15544\n' +
    '30926 3747088\n' +
    '57622 3670672\n' +
    '37268 1355\n' +
    '31994 492591\n' +
    'mask = 1X01X0100X1X0X10X000011110X11100X1X0\n' +
    '3719 889\n' +
    '60942 4205\n' +
    '5426 1425\n' +
    '39400 1357\n' +
    '48231 110916\n' +
    'mask = X1XX0X10111011X0101X01X00X01000001X0\n' +
    '25222 565\n' +
    '25657 4325\n' +
    '6319 358\n' +
    'mask = 1X1X101010000110X0X01111110X0010001X\n' +
    '10685 354498\n' +
    '40671 1078\n' +
    '20831 694693\n' +
    '56347 2893\n' +
    '41145 38570\n' +
    '877 24807\n' +
    'mask = 100110X001111X10X1111010X101010010X1\n' +
    '59369 1536028\n' +
    '12650 31302991\n' +
    '62737 1063\n' +
    '44908 1121896\n' +
    '50981 1793\n' +
    '41549 467\n' +
    'mask = 1101X01X1110011000X001X1000011X11000\n' +
    '7888 23809\n' +
    '51709 94998\n' +
    '57643 5739\n' +
    '4860 58006462\n' +
    '9555 172891\n' +
    '44267 17211850\n' +
    '40597 28094\n' +
    'mask = 10011011X11001X0X100010X000110001100\n' +
    '61860 4412269\n' +
    '7888 113388380\n' +
    '57911 100615718\n' +
    'mask = 1101101X0X110XX00X100101X10110X01X10\n' +
    '58901 337510\n' +
    '20507 14011947\n' +
    '1297 7190797\n' +
    'mask = 1100101X0X100100010X10XX110X101XX011\n' +
    '58901 338413\n' +
    '29192 18405358\n' +
    '14356 1740\n' +
    'mask = X10X1010X1100111011X101000X101110100\n' +
    '63588 62\n' +
    '37958 10875\n' +
    '57170 11532\n' +
    'mask = 11001011011X0100110101X00000100100XX\n' +
    '23685 4073432\n' +
    '52476 48853\n' +
    '8464 1362\n' +
    'mask = 110X10X011X111X0101010X1000110100101\n' +
    '58112 202002\n' +
    '31524 348910462\n' +
    '7463 379275\n' +
    '46783 516\n' +
    'mask = 1XXX00XX1XX11X001010000X010000000100\n' +
    '59845 1705\n' +
    '29610 908\n' +
    '38876 7419\n' +
    '50665 27526\n' +
    '55828 239766\n' +
    '7198 2332510\n' +
    'mask = 1101101X111001100X10X101010X1XX10010\n' +
    '58901 4157116\n' +
    '30155 2181\n' +
    '27948 167505\n' +
    '5615 6191\n' +
    '10685 6718001\n' +
    '10907 8060\n' +
    'mask = 11001010X111X11X10100000X10011010111\n' +
    '7185 199563702\n' +
    '21941 381\n' +
    '58901 5536\n' +
    '57911 16158\n' +
    '61179 43997\n' +
    'mask = 110110X0011X01XX01X10001101100110011\n' +
    '37515 733\n' +
    '21609 4275\n' +
    '60877 24488\n' +
    'mask = 11X1101110100110XX10000X0X100111X100\n' +
    '62234 5991\n' +
    '18480 60587\n' +
    'mask = X0X11X1000100110000010010011111001X0\n' +
    '54105 6396\n' +
    '26916 65750915\n' +
    'mask = 1001101001X0011100000X111111000011XX\n' +
    '10709 1636726\n' +
    '64283 8450605\n' +
    '36506 2982695\n' +
    '16588 84253\n' +
    '20114 2702\n' +
    'mask = 010X1X1001XXX100X00001000X1000X10000\n' +
    '41718 849\n' +
    '55828 198795786\n' +
    '44985 238093315\n' +
    'mask = 1X0110101110X111011001011X0X0100X100\n' +
    '61680 1953\n' +
    '1986 28915429\n' +
    '50342 453382485\n' +
    '30946 901529185\n' +
    '61748 349278\n' +
    '48297 78511621\n' +
    'mask = 1101111101100111110000001XXX10101X00\n' +
    '34726 424077\n' +
    '662 6076351\n' +
    '36217 6631187\n' +
    '40090 55913370\n' +
    'mask = 1X01101001X00X110000100010X000100000\n' +
    '48146 7118\n' +
    '47902 793\n' +
    '42824 612043\n' +
    '55984 49827115\n' +
    '2356 2180174\n' +
    '5352 156\n' +
    'mask = X001101101X00X10110X1X1X11X100101100\n' +
    '7853 16332563\n' +
    '14356 792\n' +
    '17700 9478\n' +
    'mask = 010110100010010000XX111X1X1110X00000\n' +
    '47094 295\n' +
    '43272 321261\n' +
    '48398 791\n' +
    'mask = 10011010011001000X011X1011011000X0X1\n' +
    '59153 359805\n' +
    '59453 2389171\n' +
    '34721 1050\n' +
    '25615 205647\n' +
    'mask = 11011010011001XX0XXX111X10010011XXX0\n' +
    '49588 24258309\n' +
    '9857 125489601\n' +
    '26998 57828611\n' +
    '30155 1226221\n' +
    'mask = X10X10X001100100000X0001X010X01100X0\n' +
    '61349 7180\n' +
    '21835 22741\n' +
    '40954 191961\n' +
    '57643 482698\n' +
    '41411 17811\n' +
    '55462 21319776\n' +
    '47515 2615187\n' +
    'mask = X1111010XX1101XX10101X001X0X00000100\n' +
    '6151 1463126\n' +
    '52644 7783778\n' +
    'mask = 11X110111X100110XX1011010XX00X01111X\n' +
    '30760 64\n' +
    '53149 225556464\n' +
    '28495 124093\n' +
    '14116 18796146\n' +
    '16522 1185502\n' +
    'mask = 01X0XX1X1110110X1011X011X10110000100\n' +
    '2511 1415\n' +
    '6645 21276\n' +
    '15382 14111452\n' +
    'mask = X1XX1010011101110X1010X11X10X0000X11\n' +
    '52197 1486281\n' +
    '64632 12145559\n' +
    '61183 74388\n' +
    '51657 6708652\n' +
    '57489 62339532\n' +
    'mask = 110010100XX0X1X0010X000010001000XXX1\n' +
    '57761 2008492\n' +
    '27948 247057\n' +
    '33843 92966018\n' +
    '44458 278\n' +
    '52801 437\n' +
    'mask = 11011X1101100X1X11X01001XXXX00011100\n' +
    '24290 1456055\n' +
    '23630 20246\n' +
    '33978 352201\n' +
    '12584 1718047\n' +
    'mask = 1X0110X0100X011100XX0110100001X010X1\n' +
    '2513 4373\n' +
    '16175 26467036\n' +
    '19792 19895\n' +
    '40664 28643\n' +
    '57643 264\n' +
    '45471 6119525\n' +
    '35127 5644595\n' +
    'mask = 1X01X010011001X101000101000000111X10\n' +
    '52859 1753381\n' +
    '42765 62301101\n' +
    '30314 13618\n' +
    '19897 2528961\n' +
    '44693 14301\n' +
    '51386 3407\n' +
    '29467 244447\n' +
    'mask = 1X01101001X0011X0100X000010100101001\n' +
    '43014 7202\n' +
    '55776 255530898\n' +
    '58195 10425\n' +
    '43482 57072363\n' +
    '17185 237800057\n' +
    'mask = 1XX11XXX1101110X10X000011X100000X111\n' +
    '7170 16343221\n' +
    '7498 52010\n' +
    '14356 11739\n' +
    'mask = 1X0X0000X111X1X010X0011XX1010100X000\n' +
    '64110 318\n' +
    '36357 10409392\n' +
    '27061 17517\n' +
    '42437 15677\n' +
    '49032 9620714\n' +
    'mask = X10110101011011100X01X01101101000X01\n' +
    '55980 134072224\n' +
    '4807 6332\n' +
    '23989 1457360\n' +
    '16588 1148127\n' +
    '65214 634126\n' +
    '56601 198043\n' +
    '1770 860\n' +
    'mask = 1X01101001X00111010010010X10000X1101\n' +
    '10101 495754815\n' +
    '48259 1648\n' +
    '45883 84939765\n' +
    '10110 10261\n' +
    'mask = 1X0110100110011100X01XX010X10XX1X000\n' +
    '34342 4318\n' +
    '49853 19927\n' +
    '49142 105722641\n' +
    '2453 110009314\n' +
    '26988 55762\n' +
    '26552 10874\n' +
    'mask = 1001X0XX1101100X101XX00111000000X100\n' +
    '29409 6718\n' +
    '42621 26872185\n' +
    '2074 509\n' +
    '30155 161238\n' +
    '11121 115558625\n' +
    '18317 62070\n' +
    'mask = 11X1X01011X1X1X01010000110X0000XX11X\n' +
    '54718 3211036\n' +
    '34679 107269681\n' +
    '37648 32371325\n' +
    '34726 1541\n' +
    '63265 1069841040\n' +
    '7185 1112080\n';

const processInstruction = (instruction, addressMap) => {
    const subsetOfInstructions = instruction.split('\n');
    subsetOfInstructions.pop();
    const mask = subsetOfInstructions[0];
    const numbersToInsert = [];
    const addressesToUse = [];
    parseInstruction(instruction, addressMap, numbersToInsert, addressesToUse);
    const maskLengthOffset = mask.length - 1;
    for (let i = 0; i < numbersToInsert.length; i++) {
        let numberToInsert = numbersToInsert[i];
        const addressToUse = addressesToUse[i];
        for (let j = maskLengthOffset; j >= 0; j--) {
            if (mask[j] === '0') {
                numberToInsert = BigInt(numberToInsert) & BigInt(~[BigInt(1) << BigInt(maskLengthOffset - j)]);
                //numberToInsert &= ~(1 << (maskLengthOffset - j))
            } else if (mask[j] === '1') {
                numberToInsert = BigInt(numberToInsert) | BigInt([BigInt(1) << BigInt(maskLengthOffset - j)]);
                //numberToInsert |= (1 << (maskLengthOffset - j))
            }
        }
        addressMap[addressToUse] = numberToInsert;
    }
};

const parseInstruction = (instruction, addressMap, numbersToInsert, addressesToUse) => {
    const subsetOfInstructions = instruction.split('\n');
    subsetOfInstructions.pop();
    for (let i = 1; i < subsetOfInstructions.length; i++) {
        const insertInstruction = subsetOfInstructions[i].split(' ');
        addressesToUse.push(insertInstruction[0]);
        numbersToInsert.push(BigInt(insertInstruction[1]));
    }
};

const processInstructionForPart2 = (instruction, addressMap) => {
    const subsetOfInstructions = instruction.split('\n');
    subsetOfInstructions.pop();
    const mask = subsetOfInstructions[0];
    const numbersToInsert = [];
    const addressesToUse = [];
    for (let i = 1; i < subsetOfInstructions.length; i++) {
        const insertInstruction = subsetOfInstructions[i].split(' ');
        addressesToUse.push(BigInt(insertInstruction[0]));
        numbersToInsert.push(BigInt(insertInstruction[1]));
    }
    const maskLengthOffset = mask.length - 1;
    for (let i = 0; i < numbersToInsert.length; i++) {
        let addressToUse = BigInt(addressesToUse[i]);
        const maskPositions = [];
        for (let j = maskLengthOffset; j >= 0; j--) {
           if (mask[j] === '1') {
               addressToUse = BigInt(addressToUse) | BigInt([BigInt(1) << BigInt(maskLengthOffset - j)]);
                //numberToInsert |= (1 << (maskLengthOffset - j))
            } else if (mask[j] === 'X') {
               addressToUse = BigInt(addressToUse) & BigInt(~[BigInt(1) << BigInt(maskLengthOffset - j)]);
               maskPositions.push(maskLengthOffset - j);
           }
        }
        const dp = [];
        for (let j = 0; j < maskPositions.length; j++) {
            const currDpLength = dp.length;
            if (currDpLength === 0) {
                dp.push(Math.pow(2, maskPositions[j]));
                dp.push(0);
            } else {
                for (let k = 0; k < currDpLength; k++) {
                    dp.push(Math.pow(2, maskPositions[j]) + dp[k]);
                }
            }
        }

        for (let k = 0; k < dp.length; k++) {
            const addressToWrite = BigInt(BigInt(addressToUse) + BigInt(dp[k]));
            addressMap[addressToWrite] = numbersToInsert[i];
        }
    }
};


const test_input1 = 'mask = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X\n' +
    '8 11\n' +
    '7 101\n' +
    '8 0';

const test_input2 = 'mask = 000000000000000000000000000000X1001X\n' +
    '42 100\n' +
    'mask = 00000000000000000000000000000000X0XX\n' +
    '26 1\n';


const part1Solution = (input) => {
    const data = input.split('mask = ');
    const addressMap = {};
    data.shift();
    data.forEach(instruction => processInstruction(instruction, addressMap));
    const addressesWithNonZeroValue = Object.keys(addressMap);
    let sum = BigInt(0);
    for (let i = 0; i < addressesWithNonZeroValue.length; i++) {
        sum = BigInt(sum) + BigInt(addressMap[addressesWithNonZeroValue[i]]);
    }

    return sum;
};

const part2Solution = (input) => {
    const data = input.split('mask = ');
    const addressMap = {};
    data.shift();
    data.forEach(instruction => processInstructionForPart2(instruction, addressMap));
    const addressesWithNonZeroValue = Object.keys(addressMap);
    let sum = BigInt(0);
    for (let i = 0; i < addressesWithNonZeroValue.length; i++) {
        sum = BigInt(sum) + BigInt(addressMap[addressesWithNonZeroValue[i]]);
    }

    return sum;
};

//console.log(`result: ${part1Solution(input)}`);

console.log(`result: ${part2Solution(input)}`);